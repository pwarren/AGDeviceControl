# This file was created automatically by SWIG.
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _quadservo

def _swig_setattr(self,class_type,name,value):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    self.__dict__[name] = value

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


PHIDGET_QUADSERVO_MOTOR0 = _quadservo.PHIDGET_QUADSERVO_MOTOR0
PHIDGET_QUADSERVO_MOTOR1 = _quadservo.PHIDGET_QUADSERVO_MOTOR1
PHIDGET_QUADSERVO_MOTOR2 = _quadservo.PHIDGET_QUADSERVO_MOTOR2
PHIDGET_QUADSERVO_MOTOR3 = _quadservo.PHIDGET_QUADSERVO_MOTOR3
class PhidgetQuadServo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhidgetQuadServo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhidgetQuadServo, name)
    def __repr__(self):
        return "<C PhidgetQuadServo instance at %s>" % (self.this,)
    __swig_setmethods__["phidget"] = _quadservo.PhidgetQuadServo_phidget_set
    __swig_getmethods__["phidget"] = _quadservo.PhidgetQuadServo_phidget_get
    if _newclass:phidget = property(_quadservo.PhidgetQuadServo_phidget_get, _quadservo.PhidgetQuadServo_phidget_set)
    __swig_setmethods__["servos"] = _quadservo.PhidgetQuadServo_servos_set
    __swig_getmethods__["servos"] = _quadservo.PhidgetQuadServo_servos_get
    if _newclass:servos = property(_quadservo.PhidgetQuadServo_servos_get, _quadservo.PhidgetQuadServo_servos_set)
    def __init__(self, *args):
        _swig_setattr(self, PhidgetQuadServo, 'this', _quadservo.new_PhidgetQuadServo(*args))
        _swig_setattr(self, PhidgetQuadServo, 'thisown', 1)
    def __del__(self, destroy=_quadservo.delete_PhidgetQuadServo):
        try:
            if self.thisown: destroy(self)
        except: pass

class PhidgetQuadServoPtr(PhidgetQuadServo):
    def __init__(self, this):
        _swig_setattr(self, PhidgetQuadServo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PhidgetQuadServo, 'thisown', 0)
        _swig_setattr(self, PhidgetQuadServo,self.__class__,PhidgetQuadServo)
_quadservo.PhidgetQuadServo_swigregister(PhidgetQuadServoPtr)


phidget_new_PhidgetQuadServo = _quadservo.phidget_new_PhidgetQuadServo

phidget_delete_PhidgetQuadServo = _quadservo.phidget_delete_PhidgetQuadServo

phidget_reset_PhidgetQuadServo = _quadservo.phidget_reset_PhidgetQuadServo

phidget_quadservo_open = _quadservo.phidget_quadservo_open

phidget_quadservo_close = _quadservo.phidget_quadservo_close

phidget_quadservo_is_opened = _quadservo.phidget_quadservo_is_opened

phidget_quadservo_set_servo_parameters = _quadservo.phidget_quadservo_set_servo_parameters

phidget_quadservo_set_single_position = _quadservo.phidget_quadservo_set_single_position

phidget_quadservo_set_all_positions = _quadservo.phidget_quadservo_set_all_positions

