# This file was created automatically by SWIG.
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _servomotor

def _swig_setattr(self,class_type,name,value):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    self.__dict__[name] = value

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PhidgetServoMotor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhidgetServoMotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhidgetServoMotor, name)
    def __repr__(self):
        return "<C PhidgetServoMotor instance at %s>" % (self.this,)
    __swig_setmethods__["min_pulse"] = _servomotor.PhidgetServoMotor_min_pulse_set
    __swig_getmethods__["min_pulse"] = _servomotor.PhidgetServoMotor_min_pulse_get
    if _newclass:min_pulse = property(_servomotor.PhidgetServoMotor_min_pulse_get, _servomotor.PhidgetServoMotor_min_pulse_set)
    __swig_setmethods__["max_pulse"] = _servomotor.PhidgetServoMotor_max_pulse_set
    __swig_getmethods__["max_pulse"] = _servomotor.PhidgetServoMotor_max_pulse_get
    if _newclass:max_pulse = property(_servomotor.PhidgetServoMotor_max_pulse_get, _servomotor.PhidgetServoMotor_max_pulse_set)
    __swig_setmethods__["factor"] = _servomotor.PhidgetServoMotor_factor_set
    __swig_getmethods__["factor"] = _servomotor.PhidgetServoMotor_factor_get
    if _newclass:factor = property(_servomotor.PhidgetServoMotor_factor_get, _servomotor.PhidgetServoMotor_factor_set)
    __swig_setmethods__["position"] = _servomotor.PhidgetServoMotor_position_set
    __swig_getmethods__["position"] = _servomotor.PhidgetServoMotor_position_get
    if _newclass:position = property(_servomotor.PhidgetServoMotor_position_get, _servomotor.PhidgetServoMotor_position_set)
    def __init__(self, *args):
        _swig_setattr(self, PhidgetServoMotor, 'this', _servomotor.new_PhidgetServoMotor(*args))
        _swig_setattr(self, PhidgetServoMotor, 'thisown', 1)
    def __del__(self, destroy=_servomotor.delete_PhidgetServoMotor):
        try:
            if self.thisown: destroy(self)
        except: pass

class PhidgetServoMotorPtr(PhidgetServoMotor):
    def __init__(self, this):
        _swig_setattr(self, PhidgetServoMotor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, PhidgetServoMotor, 'thisown', 0)
        _swig_setattr(self, PhidgetServoMotor,self.__class__,PhidgetServoMotor)
_servomotor.PhidgetServoMotor_swigregister(PhidgetServoMotorPtr)


phidget_reset_PhidgetServoMotor = _servomotor.phidget_reset_PhidgetServoMotor

phidget_servomotor_set_parameters = _servomotor.phidget_servomotor_set_parameters

