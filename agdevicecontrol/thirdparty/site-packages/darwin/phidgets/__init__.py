# This file was created automatically by SWIG.
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _phidgets

def _swig_setattr(self,class_type,name,value):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    self.__dict__[name] = value

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


true = _phidgets.true
false = _phidgets.false
PHIDGET_RET_SUCCESS = _phidgets.PHIDGET_RET_SUCCESS
PHIDGET_RET_INVALID_PARAMETER = _phidgets.PHIDGET_RET_INVALID_PARAMETER
PHIDGET_RET_ALREADY_INITIALISED = _phidgets.PHIDGET_RET_ALREADY_INITIALISED
PHIDGET_RET_NOT_INITIALISED = _phidgets.PHIDGET_RET_NOT_INITIALISED
PHIDGET_RET_HID_ERROR = _phidgets.PHIDGET_RET_HID_ERROR
PHIDGET_RET_DEVICE_ALREADY_OPENED = _phidgets.PHIDGET_RET_DEVICE_ALREADY_OPENED
PHIDGET_RET_DEVICE_NOT_OPENED = _phidgets.PHIDGET_RET_DEVICE_NOT_OPENED
class Phidget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Phidget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Phidget, name)
    def __repr__(self):
        return "<C Phidget instance at %s>" % (self.this,)
    __swig_setmethods__["hid_iface"] = _phidgets.Phidget_hid_iface_set
    __swig_getmethods__["hid_iface"] = _phidgets.Phidget_hid_iface_get
    if _newclass:hid_iface = property(_phidgets.Phidget_hid_iface_get, _phidgets.Phidget_hid_iface_set)
    __swig_setmethods__["hid_error"] = _phidgets.Phidget_hid_error_set
    __swig_getmethods__["hid_error"] = _phidgets.Phidget_hid_error_get
    if _newclass:hid_error = property(_phidgets.Phidget_hid_error_get, _phidgets.Phidget_hid_error_set)
    __swig_setmethods__["id"] = _phidgets.Phidget_id_set
    __swig_getmethods__["id"] = _phidgets.Phidget_id_get
    if _newclass:id = property(_phidgets.Phidget_id_get, _phidgets.Phidget_id_set)
    def __init__(self, *args):
        _swig_setattr(self, Phidget, 'this', _phidgets.new_Phidget(*args))
        _swig_setattr(self, Phidget, 'thisown', 1)
    def __del__(self, destroy=_phidgets.delete_Phidget):
        try:
            if self.thisown: destroy(self)
        except: pass

class PhidgetPtr(Phidget):
    def __init__(self, this):
        _swig_setattr(self, Phidget, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Phidget, 'thisown', 0)
        _swig_setattr(self, Phidget,self.__class__,Phidget)
_phidgets.Phidget_swigregister(PhidgetPtr)

PHIDGET_DEBUG_NONE = _phidgets.PHIDGET_DEBUG_NONE
PHIDGET_DEBUG_ERRORS = _phidgets.PHIDGET_DEBUG_ERRORS
PHIDGET_DEBUG_WARNINGS = _phidgets.PHIDGET_DEBUG_WARNINGS
PHIDGET_DEBUG_NOTICES = _phidgets.PHIDGET_DEBUG_NOTICES
PHIDGET_DEBUG_TRACES = _phidgets.PHIDGET_DEBUG_TRACES
PHIDGET_DEBUG_ASSERTS = _phidgets.PHIDGET_DEBUG_ASSERTS
PHIDGET_DEBUG_NOTRACES = _phidgets.PHIDGET_DEBUG_NOTRACES
PHIDGET_DEBUG_ALL = _phidgets.PHIDGET_DEBUG_ALL

phidget_set_debug = _phidgets.phidget_set_debug

phidget_set_debug_stream = _phidgets.phidget_set_debug_stream

phidget_new_Phidget = _phidgets.phidget_new_Phidget

phidget_reset_Phidget = _phidgets.phidget_reset_Phidget

phidget_delete_Phidget = _phidgets.phidget_delete_Phidget

phidget_init = _phidgets.phidget_init

phidget_cleanup = _phidgets.phidget_cleanup

phidget_is_initialised = _phidgets.phidget_is_initialised

phidget_open = _phidgets.phidget_open

phidget_close = _phidgets.phidget_close

phidget_is_opened = _phidgets.phidget_is_opened

